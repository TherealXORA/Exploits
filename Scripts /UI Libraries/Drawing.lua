local GameReference = cloneref(Game)

if not GameReference:IsLoaded() then GameReference.Loaded:Wait() end

--// Services \\--
local Workspace = GameReference:GetService("Workspace")
local RunService = GameReference:GetService("RunService")
local Players = GameReference:GetService("Players")
local CoreGui = GameReference:GetService("CoreGui")

--// LocalPlayer \\--
local LocalPlayer = Players.LocalPlayer
local Camera = Workspace.CurrentCamera or Workspace:FindFirstChildWhichIsA("Camera") or Workspace:FindFirstChildOfClass("Camera")

--// Drawing | Table \\--
getgenv().Drawing = {Existing = {Lines = 0, Squares = 0, Circles = 0}}

function Drawing:Parent(): ScreenGui
    local DrawingDirectory = CoreGui.RobloxGui:FindFirstChild("Drawing Directory")
    
    if not DrawingDirectory then
        DrawingDirectory = Instance.new("ScreenGui")
        DrawingDirectory.Parent = CoreGui.RobloxGui
        DrawingDirectory.Name = "Drawing Directory"
        DrawingDirectory.ResetOnSpawn = false
        DrawingDirectory.DisplayOrder = 0
        DrawingDirectory.Enabled = true
        DrawingDirectory.IgnoreGuiInset = true
    elseif DrawingDirectory and not DrawingDirectory:IsA("ScreenGui") then
        DrawingDirectory:Destroy()
        DrawingDirectory = Instance.new("ScreenGui")
        DrawingDirectory.Parent = CoreGui.RobloxGui
        DrawingDirectory.Name = "Drawing Directory"
        DrawingDirectory.ResetOnSpawn = false
        DrawingDirectory.DisplayOrder = 0
        DrawingDirectory.Enabled = true
        DrawingDirectory.IgnoreGuiInset = true
    end
    
    return DrawingDirectory
end

function Drawing.new(Type: string): 
    assert(Type, "Argument 1: Expected a string, but instead received " .. tostring(Type) .. "!")
    assert(type(Type) == "string", "Argument 1: Must be a string!")
    
    if Type == "Line" then
        --// Line | Frame \\--
        local LineFrame = Instance.new("Frame")
        LineFrame.Parent = Drawing:Parent()
        LineFrame.Name = "Line | " .. Drawing.Existing.Lines
        LineFrame.Visible = false
        LineFrame.Size = UDim2.new(0, 0, 0, 0)
        LineFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
        LineFrame.AnchorPoint = Vector2.new(0.5, 0.5)
        LineFrame.BackgroundTransparency = 0
        LineFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        LineFrame.BorderSizePixel = 0
        LineFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
        
        --// Line | UI Corner \\--
        local LineUICorner = Instance.new("UICorner")
        LineUICorner.Name = "Line Corner"
        LineUICorner.CornerRadius = UDim.new(0, 0)
        LineUICorner.Parent = LineFrame
        
        --// Line | UI Stroke \\--
        local LineUIStroke = Instance.new("UIStroke")
        LineUIStroke.Name = "Line Stroke"
        LineUIStroke.Enabled = false
        LineUIStroke.Transparency = 1
        LineUIStroke.Color = Color3.fromRGB(255, 255, 255)
        LineUIStroke.Thickness = 0
        LineUIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
        LineUIStroke.LineJoinMode = Enum.LineJoinMode.Round
        LineUIStroke.Parent = LineFrame
        
        --// Line | UI Gradient \\--
        local LineUIGradient = Instance.new("UIGradient")
        LineUIGradient.Name = "Line Gradient"
        LineUIGradient.Enabled = false
        LineUIGradient.Rotation = 0
        LineUIGradient.Offset = Vector2.new(0, 0)
        LineUIGradient.Color = ColorSequence.new(
            {ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 0))}
        )
        LineUIGradient.Transparency = NumberSequence.new(
            {NumberSequenceKeypoint.new(0, 1), NumberSequenceKeypoint.new(1, 1)}
        )
        LineUIGradient.Parent = LineFrame
        
        --// Line Stroke | UI Gradient \\--
        local LineUIStrokeUIGradient = Instance.new("UIGradient")
        LineUIStrokeUIGradient.Name = "Line Stroke Gradient"
        LineUIStrokeUIGradient.Enabled = false
        LineUIStrokeUIGradient.Rotation = 0
        LineUIStrokeUIGradient.Offset = Vector2.new(0, 0)
        LineUIStrokeUIGradient.Color = ColorSequence.new(
            {ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 0))}
        )
        LineUIStrokeUIGradient.Transparency = NumberSequence.new(
            {NumberSequenceKeypoint.new(0, 1), NumberSequenceKeypoint.new(1, 1)}
        )
        LineUIStrokeUIGradient.Parent = LineUIStroke
        
        --// Tables \\--
        
        --// Line | Table \\--
        local Line = {
            Visible = false,
            Transparency = 1,
            Color = Color3.fromRGB(255, 255, 255),
            Thickness = 0,
            From = Vector2.new(0, 0),
            To = Vector2.new(0, 0),
        }
        
        --// Line Corner | Table \\--
        local Line_Corner = {
            Method = "Offset",
            Radius = 0,
        }
        
        --// Line Stroke | Table \\--
        local Line_Stroke = {
            Visible = false,
            Transparency = 1,
            Color = Color3.fromRGB(255, 255, 255),
            Thickness = 0,
            Mode = "Border",
            Style = "Round",
            Gradient = {},
        }
        
        --// Line Gradient | Table \\--
        local Line_Gradient = {
            Visible = false,
            Transparency = {
                {Position = 0, Transparency = 1},
                {Position = 1, Transparency = 1}
            },
            Color = {
                {Position = 0, Color = Color3.fromRGB(255, 255, 255)},
                {Position = 1, Color = Color3.fromRGB(0, 0, 0)}
            },
            Rotation = 0,
            Offset = Vector2.new(0, 0),
        }
        
        --// Line Stroke Gradient | Table \\--
        local Line_Stroke_Gradient = {
            Visible = false,
            Transparency = {
                {Position = 0, Transparency = 1},
                {Position = 1, Transparency = 1}
            },
            Color = {
                {Position = 0, Color = Color3.fromRGB(255, 255, 255)},
                {Position = 1, Color = Color3.fromRGB(0, 0, 0)}
            },
            Rotation = 0,
            Offset = Vector2.new(0, 0),
        }
        
        --// Functions \\--
        
        --// Line | Destroy Function \\--
        function Line:Destroy()
            if LineFrame then
                LineFrame:Destroy()
                LineFrame = nil
            end
            if Drawing.Existing.Lines ~= 0 then
                Drawing.Existing.Lines = Drawing.Existing.Lines - 1
            end
        end
        
        --// Line | Remove Function \\--
        function Line:Remove()
            if LineFrame then
                LineFrame:Destroy()
                LineFrame = nil
            end
            if Drawing.Existing.Lines ~= 0 then
                Drawing.Existing.Lines = Drawing.Existing.Lines - 1
            end
        end
        
        --// Line | Update Function \\--
        local function UpdateLine()
            --// Variables \\--
            local Visible = Line.Visible
            local Transparency = Line.Transparency
            local Color = Line.Color
            local Thickness = Line.Thickness
            local From = Line.From
            local To = Line.To
            
            local Stroke = Line.Stroke
            local Corner = Line.Corner
            local Gradient = Line.Gradient
            local StrokeGradient = Line.Stroke.Gradient
            
            local Keypoints = {
                Line = {
                    Transparency = {}, 
                    Color = {},
                    
                    Stroke = {
                        Transparency = {}, 
                        Color = {},
                    },
                }
            }
            
            local Distance = (To - From).Magnitude
            local Angle = math.deg(math.atan2(To.Y - From.Y, To.X - From.X))
            
            
            --// Gradient Color & Visibly - Check \\-- 
            if #Gradient.Color > 1 and Gradient.Visible then
                LineFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            elseif not (#Gradient.Color <= 1 or Gradient.Visible) then
                LineFrame.BackgroundColor3 = Color
            end
            
            --// Stroke Gradient Color & Visibly - Check \\-- 
            if #StrokeGradient.Color > 1 and StrokeGradient.Visible then
                LineUIStroke.Color = Color3.fromRGB(255, 255, 255)
            elseif not (#StrokeGradient.Color <= 1 or StrokeGradient.Visible) then
                LineUIStroke.Color = Stroke.Color
            end
            
            
            --// Properties \\--
            
            
            --// Line \\--
            LineFrame.Visible = Visible
            LineFrame.BackgroundTransparency = Transparency
            LineFrame.Size = UDim2.new(0, Distance, 0, Thickness)
            LineFrame.Position = UDim2.new(0, (From.X + To.X) / 2, 0, (From.Y + To.Y) / 2)
            LineFrame.Rotation = Angle
            
            
            
            --// Line Corner \\--
            if string.lower(Corner.Method) == "scale" then
                LineUICorner.CornerRadius = UDim.new(Corner.Radius, 0)
            elseif string.lower(Corner.Method) == "offset" then
                LineUICorner.CornerRadius = UDim.new(0, Corner.Radius)
            end
            
            
            
            --// Line Stroke \\--
            LineUIStroke.Enabled = Stroke.Visible
            LineUIStroke.Transparency = Stroke.Transparency
            LineUIStroke.Color = Stroke.Color
            LineUIStroke.Thickness = Stroke.Thickness
            LineUIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode[Stroke.Mode]
            LineUIStroke.LineJoinMode = Enum.LineJoinMode[Stroke.Style]
            
            
            
            --// Line Gradient \\--
            LineUIGradient.Enabled = Gradient.Visible
            LineUIGradient.Rotation = Gradient.Rotation
            LineUIGradient.Offset = Gradient.Offset
            
            --// Transparency Key Points \\--
            for Index, TansparencyPoint in ipairs(Gradient.Transparency) do
                table.insert(Keypoints.Line.Transparency, NumberSequenceKeypoint.new(TansparencyPoint.Position, TansparencyPoint.Transparency))
            end
            
            --// Color Key Points \\--
            for Index, ColorPoint in ipairs(Gradient.Color) do
                table.insert(Keypoints.Line.Color, ColorSequenceKeypoint.new(ColorPoint.Position, ColorPoint.Color))
            end
            
            LineUIGradient.Transparency = NumberSequence.new(Keypoints.Line.Transparency)
            LineUIGradient.Color = ColorSequence.new(Keypoints.Line.Color)
            
            
            
            --// Line Stroke Gradient \\--
            LineUIStrokeUIGradient.Enabled = StrokeGradient.Visible
            LineUIStrokeUIGradient.Rotation = StrokeGradient.Rotation
            LineUIStrokeUIGradient.Offset = StrokeGradient.Offset
            
            --// Transparency Key Points \\--
            for Index, TansparencyPoint in ipairs(StrokeGradient.Transparency) do
                table.insert(Keypoints.Line.Stroke.Transparency, NumberSequenceKeypoint.new(TansparencyPoint.Position, TansparencyPoint.Transparency))
            end
            
            --// Color Key Points \\--
            for Index, ColorPoint in ipairs(StrokeGradient.Color) do
                table.insert(Keypoints.Line.Stroke.Color, ColorSequenceKeypoint.new(ColorPoint.Position, ColorPoint.Color))
            end
            
            LineUIStrokeUIGradient.Transparency = NumberSequence.new(Keypoints.Line.Stroke.Transparency)
            LineUIStrokeUIGradient.Color = ColorSequence.new(Keypoints.Line.Stroke.Color)
        end
        
        --// Metatables & Metamethods \\--
        
        --// Index's \\--
        Line.__index = Line
        Line_Corner.__index = Line_Corner
        Line_Stroke.__index = Line_Stroke
        Line_Gradient.__index = Line_Gradient
        Line_Stroke_Gradient.__index = Line_Stroke_Gradient
        
        --// Line Corner | New Index \\--
        Line_Corner.__newindex = function(Table, Key, Value)
            assert(Line_Corner[Key] ~= nil, "Attempted To Set Unknown Line Stroke Property: " .. tostring(Key))
            rawset(Line_Corner, Key, Value)
            UpdateLine()
        end
        
        --// Line Stroke | New Index \\--
        Line_Stroke.__newindex = function(Table, Key, Value)
            assert(Line_Stroke[Key] ~= nil, "Attempted To Set Unknown Line Stroke Property: " .. tostring(Key))
            rawset(Line_Stroke, Key, Value)
            UpdateLine()
        end
        
        --// Line Gradient | New Index \\--
        Line_Gradient.__newindex = function(Table, Key, Value)
            assert(Line_Gradient[Key] ~= nil, "Attempted To Set Unknown Line Gradient Property: " .. tostring(Key))
            rawset(Line_Gradient, Key, Value)
            UpdateLine()
        end
        
        --// Line Stroke Gradient | New Index \\--
        Line_Stroke_Gradient.__newindex = function(Table, Key, Value)
            assert(Line_Stroke_Gradient[Key] ~= nil, "Attempted To Set Unknown Line Stroke Gradient Property: " .. tostring(Key))
            rawset(Line_Stroke_Gradient, Key, Value)
            UpdateLine()
        end
        
        --// Line | New Index \\--
        Line.__newindex = function(Table, Key, Value)
            assert(Line[Key] ~= nil, "Attempted To Set Unknown Line Property: " .. tostring(Key))
            rawset(Line, Key, Value)
            UpdateLine()
        end
        
        --// Setmetatables \\--
        Line.Corner = setmetatable({}, Line_Corner)
        Line.Stroke = setmetatable({}, Line_Stroke)
        Line.Gradient = setmetatable({}, Line_Gradient)
        Line.Stroke.Gradient = setmetatable({}, Line_Stroke_Gradient)
        Drawing.Existing.Lines = Drawing.Existing.Lines + 1
        return setmetatable({}, Line)
    end
end
